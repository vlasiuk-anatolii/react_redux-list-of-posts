{"version":3,"sources":["store/index.ts","api/posts.ts","store/selectors.ts","components/PostsList/PostsList.tsx","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","components/Loader/Loader.tsx","api/api.ts","App.tsx","index.tsx"],"names":["ActionType","setUsersAction","createAction","SET_USERS","setPostsAction","SET_POSTS","setCommentsAction","SET_COMMENTS","setCurrentUserAction","SET_CURRENT_USER","setSelectedPostIdAction","SET_SELECTED_POST_ID","setIsLoadingAction","SET_ISLOADING","setPostTitleAction","SET_POST_TITLE","reducer","createReducer","posts","users","comments","currentUser","selectedPostId","isLoading","posttitle","builder","addCase","state","action","payload","store","configureStore","BASE_URL","getPosts","userId","a","fetch","response","ok","Error","status","statusText","json","getPostbyId","postId","getAllPosts","getUsersSelector","getPostsSelector","getCommentsSelector","getCurrentUserSelector","getSelectedPostIdSelector","getIsLoadingSelector","getPostTitleSelector","PostsList","dispatch","useDispatch","currentPostList","useSelector","userSelectedId","allPosts","result","findposts","useEffect","className","map","post","body","type","onClick","id","undefined","getComments","delComment","method","postComment","name","email","headers","JSON","stringify","NewCommentForm","commentsList","useState","yourname","setYourname","youremail","setYouremail","yourcomment","setYourcomment","error","setError","addComment","newComment","afterAdded","onSubmit","event","preventDefault","length","required","placeholder","value","onChange","target","style","color","PostDetails","postTitle","visiblecomments","setVisiblecomments","findPost","title","findcomments","deletecomment","comm","Loader","getAllUsers","App","loadUsersFromServer","usersFromServer","disabled","user","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.64a936a7.chunk.js","sourcesContent":["import { configureStore, createAction, createReducer } from '@reduxjs/toolkit';\nimport {\n  RootState, Post, User, Comment,\n} from '../react-app-env';\n\nexport enum ActionType {\n  SET_POSTS = 'SET_POSTS',\n  SET_USERS = 'SET_USERS',\n  SET_COMMENTS = 'SET_COMMENTS',\n  SET_CURRENT_USER = 'SET_CURRENT_USER',\n  SET_SELECTED_POST_ID = 'SET_SELECTED_POST_ID',\n  SET_ISLOADING = 'SET_ISLOADING',\n  SET_POST_TITLE = 'SET_POST_TITLE',\n}\n\n// Initial state\nconst initialState: RootState = {\n  posts: [],\n  users: [],\n  comments: [],\n  currentUser: '0',\n  selectedPostId: 0,\n  isLoading: false,\n  posttitle: '',\n};\n\nexport const setUsersAction = createAction<User[]>(ActionType.SET_USERS);\nexport const setPostsAction = createAction<Post[]>(ActionType.SET_POSTS);\n// eslint-disable-next-line max-len\nexport const setCommentsAction = createAction<Comment[]>(ActionType.SET_COMMENTS);\n// eslint-disable-next-line max-len\nexport const setCurrentUserAction = createAction<string>(ActionType.SET_CURRENT_USER);\n// eslint-disable-next-line max-len\nexport const setSelectedPostIdAction = createAction<number | undefined>(ActionType.SET_SELECTED_POST_ID);\n// eslint-disable-next-line max-len\nexport const setIsLoadingAction = createAction<boolean>(ActionType.SET_ISLOADING);\n// eslint-disable-next-line max-len\nexport const setPostTitleAction = createAction<string>(ActionType.SET_POST_TITLE);\n\n// rootReducer - this function is called after dispatching an action\nconst reducer = createReducer(initialState, (builder) => {\n  builder.addCase(setUsersAction, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.users = action.payload;\n  });\n  builder.addCase(setPostsAction, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.posts = action.payload;\n  });\n  builder.addCase(setCommentsAction, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.comments = action.payload;\n  });\n  builder.addCase(setCurrentUserAction, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.currentUser = action.payload;\n  });\n  builder.addCase(setSelectedPostIdAction, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.selectedPostId = action.payload;\n  });\n  builder.addCase(setIsLoadingAction, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.isLoading = action.payload;\n  });\n  builder.addCase(setPostTitleAction, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.posttitle = action.payload;\n  });\n});\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nexport const store = configureStore({\n  reducer,\n});\n","import { Post } from '../react-app-env';\n\nexport const BASE_URL = 'https://mate.academy/students-api/';\n\nexport async function getPosts(userId: string): Promise<Post[]> {\n  const response = await fetch(`${BASE_URL}/posts?userId=${userId}`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  return response.json();\n}\n\nexport async function getPostbyId(postId:number) {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n\n  return response.json();\n}\n\nexport async function getAllPosts() {\n  const response = await fetch(`${BASE_URL}/posts`);\n\n  return response.json();\n}\n","import { RootState } from '../react-app-env';\n\nexport const getUsersSelector = (state: RootState) => state.users;\nexport const getPostsSelector = (state: RootState) => state.posts;\nexport const getCommentsSelector = (state: RootState) => state.comments;\nexport const getCurrentUserSelector = (state: RootState) => state.currentUser;\nexport const getSelectedPostIdSelector = (\n  state: RootState,\n) => state.selectedPostId;\nexport const getIsLoadingSelector = (state: RootState) => state.isLoading;\nexport const getPostTitleSelector = (state: RootState) => state.posttitle;\n","import React, { useEffect } from 'react';\nimport './PostsList.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getAllPosts, getPosts } from '../../api/posts';\nimport {\n  getCurrentUserSelector,\n  getPostsSelector,\n  getSelectedPostIdSelector,\n} from '../../store/selectors';\nimport {\n  setIsLoadingAction,\n  setPostsAction,\n  setSelectedPostIdAction,\n} from '../../store';\n\nexport const PostsList: React.FC = () => {\n  const dispatch = useDispatch();\n  const currentPostList = useSelector(getPostsSelector);\n  const userSelectedId = useSelector(getCurrentUserSelector);\n  const postId = useSelector(getSelectedPostIdSelector);\n\n  const allPosts = async () => {\n    const result = await getAllPosts();\n\n    dispatch(setPostsAction(result));\n    dispatch(setIsLoadingAction(false));\n  };\n\n  const findposts = async () => {\n    const result = await getPosts(userSelectedId);\n\n    dispatch(setPostsAction(result));\n    dispatch(setIsLoadingAction(false));\n  };\n\n  useEffect(() => {\n    findposts();\n  }, [userSelectedId]);\n\n  useEffect(() => {\n    allPosts();\n  }, []);\n\n  return (\n    <div className=\"PostsList\">\n      <>\n        <h2>Posts:</h2>\n        <ul\n          className=\"PostsList__list\"\n          data-cy=\"postDetails\"\n        >\n          {currentPostList.map(post => (\n            <li\n              className=\"PostsList__item\"\n              key={post.id}\n            >\n              <div>\n                <b>\n                  [User\n                  {' '}\n                  {post.userId}\n                  ]:\n                  {' '}\n                </b>\n                {post.body}\n              </div>\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => {\n                  if (postId === post.id) {\n                    dispatch(setSelectedPostIdAction(undefined));\n                  } else {\n                    dispatch(setSelectedPostIdAction(post.id));\n                  }\n\n                  dispatch(setIsLoadingAction(true));\n                }}\n              >\n                {postId === post.id ? 'Close' : 'Open'}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </>\n    </div>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api/';\n\nexport async function getComments(postId: number) {\n  const response = await fetch(`${BASE_URL}/comments?postId=${postId}`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  return response.json();\n}\n\nexport async function delComment(id : number) {\n  const result = await fetch(`${BASE_URL}/comments/${id}`, { method: 'DELETE' });\n\n  return result;\n}\n\nexport async function postComment(\n  name : string,\n  email : string,\n  body : string,\n  postId: number,\n) {\n  await fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify({\n      postId,\n      name,\n      email,\n      body,\n    }),\n  });\n}\n","import './NewCommentForm.scss';\nimport React, { FormEvent, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Comment } from '../../react-app-env';\nimport { postComment, getComments } from '../../api/comments';\nimport { getCommentsSelector } from '../../store/selectors';\nimport { setCommentsAction } from '../../store';\n\nexport const NewCommentForm: React.FC = () => {\n  const dispatch = useDispatch();\n  const commentsList = useSelector(getCommentsSelector);\n  const [yourname, setYourname] = useState('');\n  const [youremail, setYouremail] = useState('');\n  const [yourcomment, setYourcomment] = useState('');\n  const [error, setError] = useState(false);\n\n  const addComment = async (newComment: Comment) => {\n    if (commentsList) {\n      postComment(\n        newComment.name,\n        newComment.email,\n        newComment.body,\n        newComment.postId,\n      );\n\n      const afterAdded = await getComments(newComment.postId);\n\n      dispatch(setCommentsAction(afterAdded));\n    }\n  };\n\n  const submitHandler = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (yourname && youremail && yourcomment && commentsList) {\n      const newComment = {\n        id: commentsList.length + 1,\n        postId: commentsList[0].postId,\n        name: yourname,\n        email: youremail,\n        body: yourcomment,\n      };\n\n      addComment(newComment);\n      setError(false);\n      setYourname('');\n      setYouremail('');\n      setYourcomment('');\n    } else {\n      setError(true);\n    }\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={submitHandler}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          required\n          placeholder=\"Your name\"\n          value={yourname}\n          className=\"NewCommentForm__input\"\n          onChange={(event) => {\n            setYourname(event.target.value);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          required\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={youremail}\n          onChange={(event) => {\n            setYouremail(event.target.value);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          required\n          value={yourcomment}\n          onChange={(event) => {\n            setYourcomment(event.target.value);\n          }}\n        />\n      </div>\n      {error && (\n        <div style={{ color: 'red' }}>\n          Add correct data\n        </div>\n      )}\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { getComments, delComment } from '../../api/comments';\nimport { getPostbyId } from '../../api/posts';\n\nimport {\n  getCommentsSelector,\n  getPostTitleSelector,\n  getSelectedPostIdSelector,\n} from '../../store/selectors';\nimport {\n  setCommentsAction,\n  setIsLoadingAction,\n  setPostTitleAction,\n} from '../../store';\nimport { Post } from '../../react-app-env';\n\nexport const PostDetails: React.FC = () => {\n  const dispatch = useDispatch();\n  const postTitle = useSelector(getPostTitleSelector);\n  const commentsList = useSelector(getCommentsSelector);\n\n  const postId = useSelector(getSelectedPostIdSelector);\n  const [visiblecomments, setVisiblecomments] = useState(false);\n\n  const findPost = async () => {\n    if (postId) {\n      const result:Post = await getPostbyId(postId);\n\n      dispatch(setPostTitleAction(result.title));\n    }\n  };\n\n  useEffect(() => {\n    dispatch(setIsLoadingAction(true));\n    findPost();\n    dispatch(setIsLoadingAction(false));\n  }, []);\n\n  const findcomments = async () => {\n    if (postId) {\n      const result = await getComments(postId);\n\n      dispatch(setCommentsAction(result));\n    }\n  };\n\n  const deletecomment = async (id: number) => {\n    if (commentsList) {\n      await delComment(id);\n      findcomments();\n    }\n  };\n\n  useEffect(() => {\n    dispatch(setIsLoadingAction(true));\n    findcomments();\n    dispatch(setIsLoadingAction(false));\n  }, [postId]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n      {postId && (\n        <>\n          <section className=\"PostDetails__post\">\n            <p>\n              {postTitle}\n            </p>\n          </section>\n          <section className=\"PostDetails__comments\">\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => {\n                setVisiblecomments(!visiblecomments);\n              }}\n            >\n              {commentsList && ((visiblecomments)\n                ? `Show ${commentsList.length} comments`\n                : `Hide ${commentsList.length} comments`)}\n            </button>\n            <ul\n              className={visiblecomments\n                ? 'PostDetails__visiblelist'\n                : 'PostDetails__list'}\n            >\n              {commentsList && commentsList.map(comm => (\n                <li\n                  className=\"PostDetails__list-item\"\n                  key={comm.id}\n                >\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => {\n                      deletecomment(comm.id);\n                    }}\n                  >\n                    X\n                  </button>\n                  <p>{comm.body}</p>\n                </li>\n              ))}\n              {dispatch(setIsLoadingAction(false))}\n            </ul>\n          </section>\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm />\n            </div>\n          </section>\n        </>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export const BASE_URL = 'https://mate.academy/students-api/';\n\nexport async function getAllUsers() {\n  const response = await fetch(`${BASE_URL}/users`);\n\n  return response.json();\n}\n","import React, { useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport {\n  getCurrentUserSelector,\n  getIsLoadingSelector,\n  getUsersSelector,\n} from './store/selectors';\nimport { Loader } from './components/Loader';\nimport { getAllUsers } from './api/api';\nimport {\n  setCurrentUserAction,\n  setIsLoadingAction,\n  setUsersAction,\n} from './store';\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n  const users = useSelector(getUsersSelector);\n  const currentUser = useSelector(getCurrentUserSelector);\n  const isLoading = useSelector(getIsLoadingSelector);\n\n  useEffect(() => {\n    const loadUsersFromServer = async () => {\n      const usersFromServer = await getAllUsers();\n\n      dispatch(setUsersAction(usersFromServer));\n    };\n\n    loadUsersFromServer();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={currentUser}\n            onChange={(event) => {\n              dispatch(setCurrentUserAction(event.target.value));\n              dispatch(setIsLoadingAction(true));\n            }}\n          >\n            <option value=\"0\" disabled>All users</option>\n            {users.map(user => (\n              <option\n                key={user.id}\n                value={`${user.id}`}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {isLoading && <Loader />}\n          <PostsList />\n        </div>\n\n        <div className=\"App__content\">\n          {currentUser !== '0' ? (\n            <PostDetails />\n          ) : (<p>Choose user!</p>)}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n// eslint-disable-next-line import/no-named-as-default\nimport { store } from './store';\nimport App from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}