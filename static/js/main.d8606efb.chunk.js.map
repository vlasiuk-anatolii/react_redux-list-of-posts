{"version":3,"sources":["api/api.ts","api/posts.ts","store/index.ts","store/selectors.ts","components/PostsList/PostsList.tsx","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","components/Loader/Loader.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getAllUsers","a","fetch","response","json","ActionType","getPosts","userId","ok","Error","status","statusText","getPostbyId","postId","getAllPosts","deletePost","id","method","result","setPostsAction","createAction","SET_POSTS","setCommentsAction","SET_COMMENTS","setCurrentUserAction","SET_CURRENT_USER","setSelectedPostIdAction","SET_SELECTED_POST_ID","setIsLoadingAction","SET_ISLOADING","setPostTitleAction","SET_POST_TITLE","loadUsers","createAsyncThunk","SET_USERS","usersFromServer","loadAllPosts","SET_ALL_POSTS","postsFromServer","reducer","createReducer","posts","users","comments","currentUser","selectedPostId","isLoading","posttitle","builder","addCase","state","action","payload","pending","fulfilled","store","configureStore","getUsersSelector","getPostsSelector","getCommentsSelector","getCurrentUserSelector","getSelectedPostIdSelector","getIsLoadingSelector","getPostTitleSelector","PostsList","dispatch","useDispatch","userSelectedId","useSelector","currentPostList","findposts","useEffect","className","map","post","body","type","onClick","undefined","getComments","delComment","postComment","name","email","headers","JSON","stringify","NewCommentForm","commentsList","useState","yourname","setYourname","youremail","setYouremail","yourcomment","setYourcomment","error","setError","addComment","newComment","afterAdded","onSubmit","event","preventDefault","length","required","placeholder","value","onChange","target","style","color","PostDetails","postTitle","visiblecomments","setVisiblecomments","findPost","title","findcomments","deletecomment","comm","Loader","App","disabled","user","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d8606efb.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api/';\n\nexport async function getAllUsers() {\n  const response = await fetch(`${BASE_URL}/users`);\n\n  return response.json();\n}\n","import { Post } from '../react-app-env';\n\nexport const BASE_URL = 'https://mate.academy/students-api/';\n\nexport async function getPosts(userId: string): Promise<Post[]> {\n  const response = await fetch(`${BASE_URL}/posts?userId=${userId}`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  return response.json();\n}\n\nexport async function getPostbyId(postId:number) {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n\n  return response.json();\n}\n\nexport async function getAllPosts() {\n  const response = await fetch(`${BASE_URL}/posts`);\n\n  return response.json();\n}\n\nexport async function deletePost(id : number) {\n  const result = await fetch(`${BASE_URL}/posts/${id}`, { method: 'DELETE' });\n\n  return result;\n}\n","import {\n  configureStore,\n  createAction,\n  createReducer,\n  createAsyncThunk,\n} from '@reduxjs/toolkit';\nimport {\n  RootState, Comment, Post,\n} from '../react-app-env';\nimport { getAllUsers } from '../api/api';\nimport { getAllPosts } from '../api/posts';\n\nexport enum ActionType {\n  SET_POSTS = 'SET_POSTS',\n  SET_ALL_POSTS = 'SET_ALL_POSTS',\n  SET_USERS = 'SET_USERS',\n  SET_COMMENTS = 'SET_COMMENTS',\n  SET_CURRENT_USER = 'SET_CURRENT_USER',\n  SET_SELECTED_POST_ID = 'SET_SELECTED_POST_ID',\n  SET_ISLOADING = 'SET_ISLOADING',\n  SET_POST_TITLE = 'SET_POST_TITLE',\n}\n\n// Initial state\nconst initialState: RootState = {\n  posts: [],\n  users: [],\n  comments: [],\n  currentUser: '0',\n  selectedPostId: 0,\n  isLoading: false,\n  posttitle: '',\n};\n\nexport const setPostsAction = createAction<Post[]>(ActionType.SET_POSTS);\n// eslint-disable-next-line max-len\nexport const setCommentsAction = createAction<Comment[]>(ActionType.SET_COMMENTS);\n// eslint-disable-next-line max-len\nexport const setCurrentUserAction = createAction<string>(ActionType.SET_CURRENT_USER);\n// eslint-disable-next-line max-len\nexport const setSelectedPostIdAction = createAction<number | undefined>(ActionType.SET_SELECTED_POST_ID);\n// eslint-disable-next-line max-len\nexport const setIsLoadingAction = createAction<boolean>(ActionType.SET_ISLOADING);\n// eslint-disable-next-line max-len\nexport const setPostTitleAction = createAction<string>(ActionType.SET_POST_TITLE);\n\nexport const loadUsers = createAsyncThunk(ActionType.SET_USERS, async () => {\n  const usersFromServer = await getAllUsers();\n\n  return usersFromServer;\n});\n\nexport const loadAllPosts = createAsyncThunk(\n  ActionType.SET_ALL_POSTS, async () => {\n    const postsFromServer = await getAllPosts();\n\n    return postsFromServer;\n  },\n);\n\n// rootReducer - this function is called after dispatching an action\nconst reducer = createReducer(initialState, (builder) => {\n  builder.addCase(setPostsAction, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.posts = action.payload;\n  });\n  builder.addCase(setCommentsAction, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.comments = action.payload;\n  });\n  builder.addCase(setCurrentUserAction, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.currentUser = action.payload;\n  });\n  builder.addCase(setSelectedPostIdAction, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.selectedPostId = action.payload;\n  });\n  builder.addCase(setIsLoadingAction, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.isLoading = action.payload;\n  });\n  builder.addCase(setPostTitleAction, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.posttitle = action.payload;\n  });\n  builder.addCase(loadUsers.pending, (state) => {\n    // eslint-disable-next-line no-param-reassign\n    state.isLoading = true;\n  });\n\n  builder.addCase(loadUsers.fulfilled, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.users = action.payload;\n    // eslint-disable-next-line no-param-reassign\n    state.isLoading = false;\n  });\n\n  builder.addCase(loadAllPosts.pending, (state) => {\n    // eslint-disable-next-line no-param-reassign\n    state.isLoading = true;\n  });\n\n  builder.addCase(loadAllPosts.fulfilled, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.posts = action.payload;\n    // eslint-disable-next-line no-param-reassign\n    state.isLoading = false;\n  });\n});\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nexport const store = configureStore({\n  reducer,\n});\n// type of dispath, dispatch can get async function\nexport type AppDispatch = typeof store.dispatch;\n","import { RootState } from '../react-app-env';\n\nexport const getUsersSelector = (state: RootState) => state.users;\nexport const getPostsSelector = (state: RootState) => state.posts;\nexport const getCommentsSelector = (state: RootState) => state.comments;\nexport const getCurrentUserSelector = (state: RootState) => state.currentUser;\nexport const getSelectedPostIdSelector = (\n  state: RootState,\n) => state.selectedPostId;\nexport const getIsLoadingSelector = (state: RootState) => state.isLoading;\nexport const getPostTitleSelector = (state: RootState) => state.posttitle;\nexport const getAllPostsSelector = (state: RootState) => state.posts;\n","import React, { useEffect } from 'react';\nimport './PostsList.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deletePost, getPosts } from '../../api/posts';\nimport {\n  getCurrentUserSelector,\n  getPostsSelector,\n  getSelectedPostIdSelector,\n} from '../../store/selectors';\nimport {\n  loadAllPosts,\n  setIsLoadingAction,\n  setPostsAction,\n  setSelectedPostIdAction,\n} from '../../store';\n\nexport const PostsList: React.FC = () => {\n  const dispatch = useDispatch();\n  const userSelectedId = useSelector(getCurrentUserSelector);\n  const postId = useSelector(getSelectedPostIdSelector);\n  const currentPostList = useSelector(getPostsSelector);\n\n  const findposts = async () => {\n    const result = await getPosts(userSelectedId);\n\n    dispatch(setPostsAction(result));\n    dispatch(setIsLoadingAction(false));\n  };\n\n  useEffect(() => {\n    findposts();\n  }, [userSelectedId]);\n\n  useEffect(() => {\n    dispatch(loadAllPosts());\n  }, []);\n\n  return (\n    <div className=\"PostsList\">\n      <>\n        <h2>Posts:</h2>\n        <ul\n          className=\"PostsList__list\"\n          data-cy=\"postDetails\"\n        >\n          {currentPostList.map(post => (\n            <li\n              className=\"PostsList__item\"\n              key={post.id}\n            >\n              <div>\n                <b>\n                  [User\n                  {' '}\n                  {post.userId}\n                  ]:\n                  {' '}\n                </b>\n                {post.body}\n              </div>\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => {\n                  if (postId === post.id) {\n                    dispatch(setSelectedPostIdAction(undefined));\n                  } else {\n                    dispatch(setSelectedPostIdAction(post.id));\n                  }\n\n                  dispatch(setIsLoadingAction(true));\n                }}\n              >\n                {postId === post.id ? 'Close' : 'Open'}\n              </button>\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={async () => {\n                  await deletePost(post.id);\n                  dispatch(loadAllPosts());\n                }}\n              >\n                X\n              </button>\n            </li>\n          ))}\n        </ul>\n      </>\n    </div>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api/';\n\nexport async function getComments(postId: number) {\n  const response = await fetch(`${BASE_URL}/comments?postId=${postId}`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  return response.json();\n}\n\nexport async function delComment(id : number) {\n  const result = await fetch(`${BASE_URL}/comments/${id}`, { method: 'DELETE' });\n\n  return result;\n}\n\nexport async function postComment(\n  name : string,\n  email : string,\n  body : string,\n  postId: number,\n) {\n  await fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify({\n      postId,\n      name,\n      email,\n      body,\n    }),\n  });\n}\n","import './NewCommentForm.scss';\nimport React, { FormEvent, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Comment } from '../../react-app-env';\nimport { postComment, getComments } from '../../api/comments';\nimport { getCommentsSelector } from '../../store/selectors';\nimport { setCommentsAction } from '../../store';\n\nexport const NewCommentForm: React.FC = () => {\n  const dispatch = useDispatch();\n  const commentsList = useSelector(getCommentsSelector);\n  const [yourname, setYourname] = useState('');\n  const [youremail, setYouremail] = useState('');\n  const [yourcomment, setYourcomment] = useState('');\n  const [error, setError] = useState(false);\n\n  const addComment = async (newComment: Comment) => {\n    if (commentsList) {\n      postComment(\n        newComment.name,\n        newComment.email,\n        newComment.body,\n        newComment.postId,\n      );\n\n      const afterAdded = await getComments(newComment.postId);\n\n      dispatch(setCommentsAction(afterAdded));\n    }\n  };\n\n  const submitHandler = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (yourname && youremail && yourcomment && commentsList) {\n      const newComment = {\n        id: commentsList.length + 1,\n        postId: commentsList[0].postId,\n        name: yourname,\n        email: youremail,\n        body: yourcomment,\n      };\n\n      addComment(newComment);\n      setError(false);\n      setYourname('');\n      setYouremail('');\n      setYourcomment('');\n    } else {\n      setError(true);\n    }\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={submitHandler}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          required\n          placeholder=\"Your name\"\n          value={yourname}\n          className=\"NewCommentForm__input\"\n          onChange={(event) => {\n            setYourname(event.target.value);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          required\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={youremail}\n          onChange={(event) => {\n            setYouremail(event.target.value);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          required\n          value={yourcomment}\n          onChange={(event) => {\n            setYourcomment(event.target.value);\n          }}\n        />\n      </div>\n      {error && (\n        <div style={{ color: 'red' }}>\n          Add correct data\n        </div>\n      )}\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { getComments, delComment } from '../../api/comments';\nimport { getPostbyId } from '../../api/posts';\n\nimport {\n  getCommentsSelector,\n  getPostTitleSelector,\n  getSelectedPostIdSelector,\n} from '../../store/selectors';\nimport {\n  setCommentsAction,\n  setIsLoadingAction,\n  setPostTitleAction,\n} from '../../store';\nimport { Post } from '../../react-app-env';\n\nexport const PostDetails: React.FC = () => {\n  const dispatch = useDispatch();\n  const postTitle = useSelector(getPostTitleSelector);\n  const commentsList = useSelector(getCommentsSelector);\n  const postId = useSelector(getSelectedPostIdSelector);\n  const [visiblecomments, setVisiblecomments] = useState(false);\n\n  const findPost = async () => {\n    if (postId) {\n      const result:Post = await getPostbyId(postId);\n\n      dispatch(setPostTitleAction(result.title));\n    }\n  };\n\n  const findcomments = async () => {\n    if (postId) {\n      const result = await getComments(postId);\n\n      dispatch(setCommentsAction(result));\n    }\n  };\n\n  const deletecomment = async (id: number) => {\n    if (commentsList) {\n      await delComment(id);\n      findcomments();\n    }\n  };\n\n  useEffect(() => {\n    dispatch(setIsLoadingAction(true));\n    findPost();\n    dispatch(setIsLoadingAction(false));\n    dispatch(setIsLoadingAction(true));\n    findcomments();\n    dispatch(setIsLoadingAction(false));\n  }, [postId]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n      {postId !== 0 && (\n        <>\n          <section className=\"PostDetails__post\">\n            <p>\n              {postTitle}\n            </p>\n          </section>\n          <section className=\"PostDetails__comments\">\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => {\n                setVisiblecomments(!visiblecomments);\n              }}\n            >\n              {commentsList && ((visiblecomments)\n                ? `Show ${commentsList.length} comments`\n                : `Hide ${commentsList.length} comments`)}\n            </button>\n            <ul\n              className={visiblecomments\n                ? 'PostDetails__visiblelist'\n                : 'PostDetails__list'}\n            >\n              {commentsList && commentsList.map(comm => (\n                <li\n                  className=\"PostDetails__list-item\"\n                  key={comm.id}\n                >\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => {\n                      deletecomment(comm.id);\n                    }}\n                  >\n                    X\n                  </button>\n                  <p>{comm.body}</p>\n                </li>\n              ))}\n            </ul>\n          </section>\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm />\n            </div>\n          </section>\n        </>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  AppDispatch,\n  loadUsers,\n  setCurrentUserAction,\n  setIsLoadingAction,\n} from './store/index';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport {\n  getCurrentUserSelector,\n  getIsLoadingSelector,\n  getUsersSelector,\n} from './store/selectors';\nimport { Loader } from './components/Loader';\n\nconst App: React.FC = () => {\n  const dispatch: AppDispatch = useDispatch();\n  const users = useSelector(getUsersSelector);\n  const isLoading = useSelector(getIsLoadingSelector);\n  const currentUser = useSelector(getCurrentUserSelector);\n\n  useEffect(() => {\n    dispatch(loadUsers());\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={currentUser}\n            onChange={(event) => {\n              dispatch(setCurrentUserAction(event.target.value));\n              dispatch(setIsLoadingAction(true));\n            }}\n          >\n            <option value=\"0\" disabled>All users</option>\n            {users.map(user => (\n              <option\n                key={user.id}\n                value={`${user.id}`}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {isLoading && <Loader />}\n          <PostsList />\n        </div>\n\n        <div className=\"App__content\">\n          {currentUser !== '0' ? (\n            <PostDetails />\n          ) : (<p>Choose user!</p>)}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n// eslint-disable-next-line import/no-named-as-default\nimport { store } from './store';\nimport App from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}