{"version":3,"sources":["api/api.ts","api/posts.ts","api/comments.ts","store/index.ts","store/selectors.ts","components/PostsList/PostsList.tsx","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","components/Loader/Loader.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getAllUsers","a","fetch","response","json","getPosts","userId","ok","Error","status","statusText","getPostbyId","postId","getAllPosts","deletePost","id","method","result","ActionType","getComments","delComment","postComment","name","email","body","headers","JSON","stringify","setPostsAction","createAction","SET_POSTS","setCurrentUserAction","SET_CURRENT_USER","setSelectedPostIdAction","SET_SELECTED_POST_ID","setIsLoadingAction","SET_ISLOADING","setPostTitleAction","SET_POST_TITLE","loadUsers","createAsyncThunk","SET_USERS","usersFromServer","loadAllPosts","SET_ALL_POSTS","postsFromServer","loadComments","SET_COMMENTS","commentsFromServer","reducer","createReducer","posts","users","comments","selectedUserId","selectedPostId","isLoading","posttitle","builder","addCase","state","action","payload","pending","fulfilled","store","configureStore","getUsersSelector","getPostsSelector","getCommentsSelector","getCurrentUserSelector","getSelectedPostIdSelector","getIsLoadingSelector","getPostTitleSelector","PostsList","dispatch","useDispatch","userSelectedId","useSelector","currentPostList","findposts","useEffect","className","map","post","type","onClick","undefined","NewCommentForm","commentsList","useState","setName","setEmail","comment","setComment","error","setError","addComment","newComment","onSubmit","event","preventDefault","required","placeholder","value","onChange","target","style","color","PostDetails","postTitle","visiblecomments","setVisiblecomments","findPost","title","findcomments","deletecomment","length","comm","Loader","App","currentUser","disabled","user","Root","ReactDOM","render","document","getElementById"],"mappings":"mVAAaA,EAAW,qCAEjB,SAAeC,IAAtB,+B,4CAAO,4BAAAC,EAAA,sEACkBC,MAAM,GAAD,OAAIH,EAAJ,WADvB,cACCI,EADD,yBAGEA,EAASC,QAHX,4C,sBCAA,IAAML,EAAW,qCAEjB,SAAeM,EAAtB,kC,4CAAO,WAAwBC,GAAxB,eAAAL,EAAA,sEACkBC,MAAM,GAAD,OAAIH,EAAJ,yBAA6BO,IADpD,WACCH,EADD,QAGSI,GAHT,sBAIG,IAAIC,MAAJ,UAAaL,EAASM,OAAtB,cAAkCN,EAASO,aAJ9C,gCAOEP,EAASC,QAPX,4C,sBAUA,SAAeO,EAAtB,kC,4CAAO,WAA2BC,GAA3B,eAAAX,EAAA,sEACkBC,MAAM,GAAD,OAAIH,EAAJ,kBAAsBa,IAD7C,WACCT,EADD,QAGSI,GAHT,sBAIG,IAAIC,MAAJ,UAAaL,EAASM,OAAtB,cAAkCN,EAASO,aAJ9C,gCAOEP,EAASC,QAPX,4C,sBAUA,SAAeS,IAAtB,+B,4CAAO,4BAAAZ,EAAA,sEACkBC,MAAM,GAAD,OAAIH,EAAJ,WADvB,WACCI,EADD,QAGSI,GAHT,sBAIG,IAAIC,MAAJ,UAAaL,EAASM,OAAtB,cAAkCN,EAASO,aAJ9C,gCAOEP,EAASC,QAPX,4C,sBAUA,SAAeU,EAAtB,kC,4CAAO,WAA0BC,GAA1B,eAAAd,EAAA,sEACgBC,MAAM,GAAD,OAAIH,EAAJ,kBAAsBgB,GAAM,CAAEC,OAAQ,WAD3D,cACCC,EADD,yBAGEA,GAHF,4C,sBClCA,ICaKC,EDbCnB,EAAW,qCAEjB,SAAeoB,EAAtB,kC,4CAAO,WAA2BP,GAA3B,eAAAX,EAAA,sEACkBC,MAAM,GAAD,OAAIH,EAAJ,4BAAgCa,IADvD,WACCT,EADD,QAGSI,GAHT,sBAIG,IAAIC,MAAJ,UAAaL,EAASM,OAAtB,cAAkCN,EAASO,aAJ9C,gCAOEP,EAASC,QAPX,4C,sBAUA,SAAegB,EAAtB,kC,4CAAO,WAA0BL,GAA1B,eAAAd,EAAA,sEACgBC,MAAM,GAAD,OAAIH,EAAJ,qBAAyBgB,GAAM,CAAEC,OAAQ,WAD9D,cACCC,EADD,yBAGEA,GAHF,4C,sBAMA,SAAeI,EAAtB,wC,4CAAO,WACLC,EACAC,EACAC,EACAZ,GAJK,SAAAX,EAAA,sEAMCC,MAAM,GAAD,OAAIH,EAAJ,aAAyB,CAClCiB,OAAQ,OACRS,QAAS,CACP,eAAgB,mCAElBD,KAAME,KAAKC,UAAU,CACnBf,SACAU,OACAC,QACAC,WAfC,4C,gCCLKN,K,sBAAAA,E,8BAAAA,E,sBAAAA,E,4BAAAA,E,oCAAAA,E,4CAAAA,E,8BAAAA,E,iCAAAA,M,KAYZ,IAUaU,EAAiBC,YAAqBX,EAAWY,WAEjDC,EAAuBF,YAAqBX,EAAWc,kBAEvDC,EAA0BJ,YAAiCX,EAAWgB,sBAEtEC,EAAqBN,YAAsBX,EAAWkB,eAEtDC,EAAqBR,YAAqBX,EAAWoB,gBAErDC,EAAYC,YAAiBtB,EAAWuB,UAAZ,sBAAuB,4BAAAxC,EAAA,sEAChCD,IADgC,cACxD0C,EADwD,yBAGvDA,GAHuD,4CAMnDC,EAAeH,YAC1BtB,EAAW0B,cAD+B,sBAChB,4BAAA3C,EAAA,sEACMY,IADN,cAClBgC,EADkB,yBAGjBA,GAHiB,4CAOfC,EAAeN,YAC1BtB,EAAW6B,aAD+B,uCACjB,WAAOhC,GAAP,eAAAd,EAAA,sEACUkB,EAAYJ,GADtB,cACjBiC,EADiB,yBAGhBA,GAHgB,2CADiB,uDAStCC,EAAUC,YA3CgB,CAC9BC,MAAO,GACPC,MAAO,GACPC,SAAU,GACVC,eAAgB,IAChBC,eAAgB,EAChBC,WAAW,EACXC,UAAW,KAoC+B,SAACC,GAC3CA,EAAQC,QAAQ/B,GAAgB,SAACgC,EAAOC,GAEtCD,EAAMT,MAAQU,EAAOC,WAGvBJ,EAAQC,QAAQ5B,GAAsB,SAAC6B,EAAOC,GAE5CD,EAAMN,eAAiBO,EAAOC,WAEhCJ,EAAQC,QAAQ1B,GAAyB,SAAC2B,EAAOC,GAE/CD,EAAML,eAAiBM,EAAOC,WAEhCJ,EAAQC,QAAQxB,GAAoB,SAACyB,EAAOC,GAE1CD,EAAMJ,UAAYK,EAAOC,WAE3BJ,EAAQC,QAAQtB,GAAoB,SAACuB,EAAOC,GAE1CD,EAAMH,UAAYI,EAAOC,WAE3BJ,EAAQC,QAAQpB,EAAUwB,SAAS,SAACH,GAElCA,EAAMJ,WAAY,KAGpBE,EAAQC,QAAQpB,EAAUyB,WAAW,SAACJ,EAAOC,GAE3CD,EAAMR,MAAQS,EAAOC,QAErBF,EAAMJ,WAAY,KAGpBE,EAAQC,QAAQhB,EAAaoB,SAAS,SAACH,GAErCA,EAAMJ,WAAY,KAGpBE,EAAQC,QAAQhB,EAAaqB,WAAW,SAACJ,EAAOC,GAE9CD,EAAMT,MAAQU,EAAOC,QAErBF,EAAMJ,WAAY,KAGpBE,EAAQC,QAAQb,EAAaiB,SAAS,SAACH,GAErCA,EAAMJ,WAAY,KAGpBE,EAAQC,QAAQb,EAAakB,WAAW,SAACJ,EAAOC,GAE9CD,EAAMP,SAAWQ,EAAOC,QAExBF,EAAMJ,WAAY,QAKTS,EAAQC,YAAe,CAClCjB,Y,OC/HWkB,G,kBAAmB,SAACP,GAAD,OAAsBA,EAAMR,QAC/CgB,EAAmB,SAACR,GAAD,OAAsBA,EAAMT,OAC/CkB,EAAsB,SAACT,GAAD,OAAsBA,EAAMP,UAClDiB,EAAyB,SACpCV,GADoC,OAEjCA,EAAMN,gBACEiB,EAA4B,SACvCX,GADuC,OAEpCA,EAAML,gBACEiB,EAAuB,SAACZ,GAAD,OAAsBA,EAAMJ,WACnDiB,EAAuB,SAACb,GAAD,OAAsBA,EAAMH,W,OCKnDiB,EAAsB,WACjC,IAAMC,EAAWC,cACXC,EAAiBC,YAAYR,GAC7B1D,EAASkE,YAAYP,GACrBQ,EAAkBD,YAAYV,GAE9BY,EAAS,uCAAG,4BAAA/E,EAAA,sEACKI,EAASwE,GADd,OACV5D,EADU,OAGhB0D,EAAS/C,EAAeX,IACxB0D,EAASxC,GAAmB,IAJZ,2CAAH,qDAef,OARA8C,qBAAU,WACRD,MACC,CAACH,IAEJI,qBAAU,WACRN,EAAShC,OACR,IAGD,qBAAKuC,UAAU,YAAf,SACE,qCACE,wCACA,oBACEA,UAAU,kBACV,UAAQ,cAFV,SAIGH,EAAgBI,KAAI,SAAAC,GAAI,OACvB,qBACEF,UAAU,kBADZ,UAIE,gCACE,sCAEG,IACAE,EAAK9E,OAHR,KAKG,OAEF8E,EAAK5D,QAER,sBAAK0D,UAAU,uBAAf,UACE,wBACEG,KAAK,SACLH,UAAU,2BACVI,QAAS,WACH1E,IAAWwE,EAAKrE,GAClB4D,EAAS1C,OAAwBsD,KAEjCZ,EAAS1C,EAAwBmD,EAAKrE,KACtC4D,EAAS7B,EAAasC,EAAKrE,MAG7B4D,EAASxC,GAAmB,KAXhC,SAcGvB,IAAWwE,EAAKrE,GAAK,QAAU,SAElC,wBACEsE,KAAK,SACLH,UAAU,2BACVI,QAAO,sBAAE,sBAAArF,EAAA,sEACDa,EAAWsE,EAAKrE,IADf,OAEP4D,EAAShC,KAFF,2CAHX,oBA7BGyC,EAAKrE,e,OCtCXyE,G,MAA2B,WACtC,IAAMb,EAAWC,cACXa,EAAeX,YAAYT,GAC3BzD,EAASkE,YAAYP,GAC3B,EAAwBmB,mBAAS,IAAjC,mBAAOpE,EAAP,KAAaqE,EAAb,KACA,EAA0BD,mBAAS,IAAnC,mBAAOnE,EAAP,KAAcqE,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA0BJ,oBAAS,GAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAEMC,EAAU,uCAAG,WAAOC,GAAP,SAAAjG,EAAA,sDACbwF,IACFpE,EACE6E,EAAW5E,KACX4E,EAAW3E,MACX2E,EAAW1E,KACX0E,EAAWtF,QAGb+D,EAAS7B,EAAalC,KATP,2CAAH,sDAkChB,OACE,uBACEsE,UAAU,iBACViB,SAxBkB,SAACC,IACrBA,EAAMC,iBAEF/E,GAAQC,GAASsE,GAAWJ,IAQ9BQ,EAP+B,CAC7BrF,SACAU,OACAC,QACAC,KAAMqE,IAIRG,GAAS,GACTL,EAAQ,IACRC,EAAS,IACTE,EAAW,KAEXE,GAAS,IAKX,UAIE,qBAAKd,UAAU,aAAf,SACE,uBACEG,KAAK,OACL/D,KAAK,OACLgF,UAAQ,EACRC,YAAY,YACZC,MAAOlF,EACP4D,UAAU,wBACVuB,SAAU,SAACL,GACTT,EAAQS,EAAMM,OAAOF,YAK3B,qBAAKtB,UAAU,aAAf,SACE,uBACEG,KAAK,QACL/D,KAAK,QACLgF,UAAQ,EACRC,YAAY,aACZrB,UAAU,wBACVsB,MAAOjF,EACPkF,SAAU,SAACL,GACTR,EAASQ,EAAMM,OAAOF,YAK5B,qBAAKtB,UAAU,aAAf,SACE,0BACE5D,KAAK,OACLiF,YAAY,oBACZrB,UAAU,wBACVoB,UAAQ,EACRE,MAAOX,EACPY,SAAU,SAACL,GACTN,EAAWM,EAAMM,OAAOF,YAI7BT,GACC,qBAAKY,MAAO,CAAEC,MAAO,OAArB,8BAKF,wBACEvB,KAAK,SACLH,UAAU,uCAFZ,gCCtFO2B,G,MAAwB,WACnC,IAAMlC,EAAWC,cACXkC,EAAYhC,YAAYL,GACxBgB,EAAeX,YAAYT,GAC3BzD,EAASkE,YAAYP,GAC3B,EAA8CmB,oBAAS,GAAvD,mBAAOqB,EAAP,KAAwBC,EAAxB,KAIMC,EAAQ,uCAAG,4BAAAhH,EAAA,0DACXW,EADW,gCAEaD,EAAYC,GAFzB,OAEPK,EAFO,OAIb0D,EAAStC,EAAmBpB,EAAOiG,QAJtB,2CAAH,qDAQRC,EAAY,uCAAG,sBAAAlH,EAAA,sDACnB0E,EAAS7B,EAAalC,IADH,2CAAH,qDAIZwG,EAAa,uCAAG,WAAOrG,GAAP,SAAAd,EAAA,0DAChBwF,EADgB,gCAEZrE,EAAWL,GAFC,OAGlBoG,IAHkB,2CAAH,sDAgBnB,OATAlC,qBAAU,WACRN,EAASxC,GAAmB,IAC5B8E,IACAtC,EAASxC,GAAmB,IAC5BwC,EAASxC,GAAmB,IAC5BgF,IACAxC,EAASxC,GAAmB,MAC3B,CAACsD,IAGF,sBAAKP,UAAU,cAAf,UACE,+CACY,IAAXtE,GACC,qCACE,yBAASsE,UAAU,oBAAnB,SACE,4BACG4B,MAGL,0BAAS5B,UAAU,wBAAnB,UACE,wBACEG,KAAK,SACLH,UAAU,SACVI,QAAS,WACP0B,GAAoBD,IAJxB,SAOGtB,IAAkBsB,EAAD,eACNtB,EAAa4B,OADP,4BAEN5B,EAAa4B,OAFP,gBAIpB,oBACEnC,UAAW6B,EACP,2BACA,oBAHN,SAKGtB,GAAgBA,EAAaN,KAAI,SAAAmC,GAAI,OACpC,qBACEpC,UAAU,yBADZ,UAIE,wBACEG,KAAK,SACLH,UAAU,oCACVI,QAAS,WACP8B,EAAcE,EAAKvG,KAJvB,eASA,4BAAIuG,EAAK9F,SAXJ8F,EAAKvG,YAiBlB,kCACE,qBAAKmE,UAAU,4BAAf,SACE,cAAC,EAAD,gBCtGDqC,I,MAAmB,kBAC9B,qBAAKrC,UAAU,SAAf,SACE,qBAAKA,UAAU,wBCgEJsC,GAlDO,WACpB,IAAM7C,EAAwBC,cACxBxB,EAAQ0B,YAAYX,GACpBX,EAAYsB,YAAYN,GACxBiD,EAAc3C,YAAYR,GAMhC,OAJAW,qBAAU,WACRN,EAASpC,OACR,IAGD,sBAAK2C,UAAU,MAAf,UACE,wBAAQA,UAAU,cAAlB,SACE,wDAGE,yBACEA,UAAU,qBACVsB,MAAOiB,EACPhB,SAAU,SAACL,GACTzB,EAAS5C,EAAqBqE,EAAMM,OAAOF,QAC3C7B,EAASxC,GAAmB,KALhC,UAQE,wBAAQqE,MAAM,IAAIkB,UAAQ,EAA1B,uBACCtE,EAAM+B,KAAI,SAAAwC,GAAI,OACb,wBAEEnB,MAAK,UAAKmB,EAAK5G,IAFjB,SAIG4G,EAAKrG,MAHDqG,EAAK5G,eAUpB,uBAAMmE,UAAU,YAAhB,UACE,sBAAKA,UAAU,eAAf,UACG1B,GAAa,cAAC,GAAD,IACd,cAAC,EAAD,OAEF,qBAAK0B,UAAU,eAAf,SACE,cAAC,EAAD,aCvDJ0C,GAAO,kBACX,cAAC,IAAD,CAAU3D,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,GAAD,SAKN4D,IAASC,OAAO,cAAC,GAAD,IAAUC,SAASC,eAAe,W","file":"static/js/main.af8943b8.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api/';\n\nexport async function getAllUsers() {\n  const response = await fetch(`${BASE_URL}/users`);\n\n  return response.json();\n}\n","import { Post } from '../react-app-env';\n\nexport const BASE_URL = 'https://mate.academy/students-api/';\n\nexport async function getPosts(userId: string): Promise<Post[]> {\n  const response = await fetch(`${BASE_URL}/posts?userId=${userId}`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  return response.json();\n}\n\nexport async function getPostbyId(postId:number) {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  return response.json();\n}\n\nexport async function getAllPosts() {\n  const response = await fetch(`${BASE_URL}/posts`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  return response.json();\n}\n\nexport async function deletePost(id : number) {\n  const result = await fetch(`${BASE_URL}/posts/${id}`, { method: 'DELETE' });\n\n  return result;\n}\n","export const BASE_URL = 'https://mate.academy/students-api/';\n\nexport async function getComments(postId: number | undefined) {\n  const response = await fetch(`${BASE_URL}/comments?postId=${postId}`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  return response.json();\n}\n\nexport async function delComment(id : number) {\n  const result = await fetch(`${BASE_URL}/comments/${id}`, { method: 'DELETE' });\n\n  return result;\n}\n\nexport async function postComment(\n  name : string,\n  email : string,\n  body : string,\n  postId: number | undefined,\n) {\n  await fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify({\n      postId,\n      name,\n      email,\n      body,\n    }),\n  });\n}\n","import {\n  configureStore,\n  createAction,\n  createReducer,\n  createAsyncThunk,\n} from '@reduxjs/toolkit';\nimport {\n  RootState, Post,\n} from '../react-app-env';\nimport { getAllUsers } from '../api/api';\nimport { getAllPosts } from '../api/posts';\nimport { getComments } from '../api/comments';\n\nexport enum ActionType {\n  SET_POSTS = 'SET_POSTS',\n  SET_ALL_POSTS = 'SET_ALL_POSTS',\n  SET_USERS = 'SET_USERS',\n  SET_COMMENTS = 'SET_COMMENTS',\n  SET_CURRENT_USER = 'SET_CURRENT_USER',\n  SET_SELECTED_POST_ID = 'SET_SELECTED_POST_ID',\n  SET_ISLOADING = 'SET_ISLOADING',\n  SET_POST_TITLE = 'SET_POST_TITLE',\n}\n\n// Initial state\nconst initialState: RootState = {\n  posts: [],\n  users: [],\n  comments: [],\n  selectedUserId: '0',\n  selectedPostId: 0,\n  isLoading: false,\n  posttitle: '',\n};\n\nexport const setPostsAction = createAction<Post[]>(ActionType.SET_POSTS);\n// eslint-disable-next-line max-len\nexport const setCurrentUserAction = createAction<string>(ActionType.SET_CURRENT_USER);\n// eslint-disable-next-line max-len\nexport const setSelectedPostIdAction = createAction<number | undefined>(ActionType.SET_SELECTED_POST_ID);\n// eslint-disable-next-line max-len\nexport const setIsLoadingAction = createAction<boolean>(ActionType.SET_ISLOADING);\n// eslint-disable-next-line max-len\nexport const setPostTitleAction = createAction<string>(ActionType.SET_POST_TITLE);\n\nexport const loadUsers = createAsyncThunk(ActionType.SET_USERS, async () => {\n  const usersFromServer = await getAllUsers();\n\n  return usersFromServer;\n});\n\nexport const loadAllPosts = createAsyncThunk(\n  ActionType.SET_ALL_POSTS, async () => {\n    const postsFromServer = await getAllPosts();\n\n    return postsFromServer;\n  },\n);\n\nexport const loadComments = createAsyncThunk(\n  ActionType.SET_COMMENTS, async (id: number | undefined) => {\n    const commentsFromServer = await getComments(id);\n\n    return commentsFromServer;\n  },\n);\n\n// rootReducer - this function is called after dispatching an action\nconst reducer = createReducer(initialState, (builder) => {\n  builder.addCase(setPostsAction, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.posts = action.payload;\n  });\n\n  builder.addCase(setCurrentUserAction, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.selectedUserId = action.payload;\n  });\n  builder.addCase(setSelectedPostIdAction, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.selectedPostId = action.payload;\n  });\n  builder.addCase(setIsLoadingAction, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.isLoading = action.payload;\n  });\n  builder.addCase(setPostTitleAction, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.posttitle = action.payload;\n  });\n  builder.addCase(loadUsers.pending, (state) => {\n    // eslint-disable-next-line no-param-reassign\n    state.isLoading = true;\n  });\n\n  builder.addCase(loadUsers.fulfilled, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.users = action.payload;\n    // eslint-disable-next-line no-param-reassign\n    state.isLoading = false;\n  });\n\n  builder.addCase(loadAllPosts.pending, (state) => {\n    // eslint-disable-next-line no-param-reassign\n    state.isLoading = true;\n  });\n\n  builder.addCase(loadAllPosts.fulfilled, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.posts = action.payload;\n    // eslint-disable-next-line no-param-reassign\n    state.isLoading = false;\n  });\n\n  builder.addCase(loadComments.pending, (state) => {\n    // eslint-disable-next-line no-param-reassign\n    state.isLoading = true;\n  });\n\n  builder.addCase(loadComments.fulfilled, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.comments = action.payload;\n    // eslint-disable-next-line no-param-reassign\n    state.isLoading = false;\n  });\n});\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nexport const store = configureStore({\n  reducer,\n});\n// type of dispath, dispatch can get async function\nexport type AppDispatch = typeof store.dispatch;\n","import { RootState } from '../react-app-env';\n\nexport const getUsersSelector = (state: RootState) => state.users;\nexport const getPostsSelector = (state: RootState) => state.posts;\nexport const getCommentsSelector = (state: RootState) => state.comments;\nexport const getCurrentUserSelector = (\n  state: RootState,\n) => state.selectedUserId;\nexport const getSelectedPostIdSelector = (\n  state: RootState,\n) => state.selectedPostId;\nexport const getIsLoadingSelector = (state: RootState) => state.isLoading;\nexport const getPostTitleSelector = (state: RootState) => state.posttitle;\nexport const getAllPostsSelector = (state: RootState) => state.posts;\n","import React, { useEffect } from 'react';\nimport './PostsList.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deletePost, getPosts } from '../../api/posts';\nimport {\n  getCurrentUserSelector,\n  getPostsSelector,\n  getSelectedPostIdSelector,\n} from '../../store/selectors';\nimport {\n  loadAllPosts,\n  loadComments,\n  setIsLoadingAction,\n  setPostsAction,\n  setSelectedPostIdAction,\n} from '../../store';\n\nexport const PostsList: React.FC = () => {\n  const dispatch = useDispatch();\n  const userSelectedId = useSelector(getCurrentUserSelector);\n  const postId = useSelector(getSelectedPostIdSelector);\n  const currentPostList = useSelector(getPostsSelector);\n\n  const findposts = async () => {\n    const result = await getPosts(userSelectedId);\n\n    dispatch(setPostsAction(result));\n    dispatch(setIsLoadingAction(false));\n  };\n\n  useEffect(() => {\n    findposts();\n  }, [userSelectedId]);\n\n  useEffect(() => {\n    dispatch(loadAllPosts());\n  }, []);\n\n  return (\n    <div className=\"PostsList\">\n      <>\n        <h2>Posts:</h2>\n        <ul\n          className=\"PostsList__list\"\n          data-cy=\"postDetails\"\n        >\n          {currentPostList.map(post => (\n            <li\n              className=\"PostsList__item\"\n              key={post.id}\n            >\n              <div>\n                <b>\n                  [User\n                  {' '}\n                  {post.userId}\n                  ]:\n                  {' '}\n                </b>\n                {post.body}\n              </div>\n              <div className=\"PostsList__buttonbox\">\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => {\n                    if (postId === post.id) {\n                      dispatch(setSelectedPostIdAction(undefined));\n                    } else {\n                      dispatch(setSelectedPostIdAction(post.id));\n                      dispatch(loadComments(post.id));\n                    }\n\n                    dispatch(setIsLoadingAction(true));\n                  }}\n                >\n                  {postId === post.id ? 'Close' : 'Open'}\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={async () => {\n                    await deletePost(post.id);\n                    dispatch(loadAllPosts());\n                  }}\n                >\n                  X\n                </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </>\n    </div>\n  );\n};\n","import './NewCommentForm.scss';\nimport React, { FormEvent, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { NewComment } from '../../react-app-env';\nimport { postComment } from '../../api/comments';\nimport {\n  getCommentsSelector,\n  getSelectedPostIdSelector,\n} from '../../store/selectors';\nimport { loadComments } from '../../store';\n\nexport const NewCommentForm: React.FC = () => {\n  const dispatch = useDispatch();\n  const commentsList = useSelector(getCommentsSelector);\n  const postId = useSelector(getSelectedPostIdSelector);\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [comment, setComment] = useState('');\n  const [error, setError] = useState(false);\n\n  const addComment = async (newComment: NewComment) => {\n    if (commentsList) {\n      postComment(\n        newComment.name,\n        newComment.email,\n        newComment.body,\n        newComment.postId,\n      );\n\n      dispatch(loadComments(postId));\n    }\n  };\n\n  const submitHandler = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (name && email && comment && commentsList) {\n      const newComment: NewComment = {\n        postId,\n        name,\n        email,\n        body: comment,\n      };\n\n      addComment(newComment);\n      setError(false);\n      setName('');\n      setEmail('');\n      setComment('');\n    } else {\n      setError(true);\n    }\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={submitHandler}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          required\n          placeholder=\"Your name\"\n          value={name}\n          className=\"NewCommentForm__input\"\n          onChange={(event) => {\n            setName(event.target.value);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          required\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={(event) => {\n            setEmail(event.target.value);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          required\n          value={comment}\n          onChange={(event) => {\n            setComment(event.target.value);\n          }}\n        />\n      </div>\n      {error && (\n        <div style={{ color: 'red' }}>\n          Add correct data\n        </div>\n      )}\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { delComment } from '../../api/comments';\nimport { getPostbyId } from '../../api/posts';\n\nimport {\n  getCommentsSelector,\n  getPostTitleSelector,\n  getSelectedPostIdSelector,\n} from '../../store/selectors';\nimport {\n  loadComments,\n  setIsLoadingAction,\n  setPostTitleAction,\n} from '../../store';\nimport { Post } from '../../react-app-env';\n\nexport const PostDetails: React.FC = () => {\n  const dispatch = useDispatch();\n  const postTitle = useSelector(getPostTitleSelector);\n  const commentsList = useSelector(getCommentsSelector);\n  const postId = useSelector(getSelectedPostIdSelector);\n  const [visiblecomments, setVisiblecomments] = useState(false);\n  // console.log(postId)\n  // console.log(commentsList)\n\n  const findPost = async () => {\n    if (postId) {\n      const result:Post = await getPostbyId(postId);\n\n      dispatch(setPostTitleAction(result.title));\n    }\n  };\n\n  const findcomments = async () => {\n    dispatch(loadComments(postId));\n  };\n\n  const deletecomment = async (id: number) => {\n    if (commentsList) {\n      await delComment(id);\n      findcomments();\n    }\n  };\n\n  useEffect(() => {\n    dispatch(setIsLoadingAction(true));\n    findPost();\n    dispatch(setIsLoadingAction(false));\n    dispatch(setIsLoadingAction(true));\n    findcomments();\n    dispatch(setIsLoadingAction(false));\n  }, [commentsList]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n      {postId !== 0 && (\n        <>\n          <section className=\"PostDetails__post\">\n            <p>\n              {postTitle}\n            </p>\n          </section>\n          <section className=\"PostDetails__comments\">\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => {\n                setVisiblecomments(!visiblecomments);\n              }}\n            >\n              {commentsList && ((visiblecomments)\n                ? `Show ${commentsList.length} comments`\n                : `Hide ${commentsList.length} comments`)}\n            </button>\n            <ul\n              className={visiblecomments\n                ? 'PostDetails__visiblelist'\n                : 'PostDetails__list'}\n            >\n              {commentsList && commentsList.map(comm => (\n                <li\n                  className=\"PostDetails__list-item\"\n                  key={comm.id}\n                >\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => {\n                      deletecomment(comm.id);\n                    }}\n                  >\n                    X\n                  </button>\n                  <p>{comm.body}</p>\n                </li>\n              ))}\n            </ul>\n          </section>\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm />\n            </div>\n          </section>\n        </>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  AppDispatch,\n  loadUsers,\n  setCurrentUserAction,\n  setIsLoadingAction,\n} from './store/index';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport {\n  getCurrentUserSelector,\n  getIsLoadingSelector,\n  getUsersSelector,\n} from './store/selectors';\nimport { Loader } from './components/Loader';\n\nconst App: React.FC = () => {\n  const dispatch: AppDispatch = useDispatch();\n  const users = useSelector(getUsersSelector);\n  const isLoading = useSelector(getIsLoadingSelector);\n  const currentUser = useSelector(getCurrentUserSelector);\n\n  useEffect(() => {\n    dispatch(loadUsers());\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={currentUser}\n            onChange={(event) => {\n              dispatch(setCurrentUserAction(event.target.value));\n              dispatch(setIsLoadingAction(true));\n            }}\n          >\n            <option value=\"0\" disabled>All users</option>\n            {users.map(user => (\n              <option\n                key={user.id}\n                value={`${user.id}`}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {isLoading && <Loader />}\n          <PostsList />\n        </div>\n        <div className=\"App__content\">\n          <PostDetails />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n// eslint-disable-next-line import/no-named-as-default\nimport { store } from './store';\nimport App from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}